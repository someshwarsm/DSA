##################      Question      #################
Print all LCS sequences
You are given two strings s and t. Now your task is to print all longest common sub-sequences in lexicographical order.

Note -  A Sub-sequence is derived from another string by deleting some or none of the elements without changing the order of the remaining elements.


#####################      Answer       ##################

class Solution {
    HashMap<String, List<String>> memo;
    List<String> backtrack(int[][] dp, int i, int j, String text1, String text2){
        if(i==0 || j==0){
            return new ArrayList<>();
        }
        
        String key = i+","+j;
        
        if(memo.get(key)!=null){
            return memo.get(key);
        }
        
        List<String> l;
        HashSet<String> hs = new HashSet<>();
        
        if(text1.charAt(i-1)==text2.charAt(j-1)){
            l = backtrack(dp, i-1, j-1, text1, text2);
            for(int k=0;k<l.size();k++){
                hs.add(l.get(k)+text1.charAt(i-1));
            }
            if(l.size()==0)
                hs.add(String.valueOf(text1.charAt(i-1)));
        }
        else{
            if(dp[i-1][j]==dp[i][j]){
                hs.addAll(backtrack(dp, i-1, j, text1, text2));
            }
            if(dp[i][j-1] == dp[i][j]){
                hs.addAll(backtrack(dp, i, j-1, text1, text2));
            }
        }
        
        memo.put(key, new ArrayList<>(hs));
        return memo.get(key);
    }
    public List<String> all_longest_common_subsequences(String text1, String text2) {
        int m = text1.length(), n=text2.length();
        int[][] dp = new int[m+1][n+1];



        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                dp[i][j]= Math.max(dp[i-1][j], dp[i][j-1]);
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    dp[i][j]=Math.max(dp[i][j], 1+dp[i-1][j-1]);
                }
            }
        }
        
        memo = new HashMap<>();
        List<String> l = backtrack(dp, m, n, text1, text2);
        Collections.sort(l);
        return l;
    }
}